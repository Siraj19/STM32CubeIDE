
STM32F103C8T6_I2C_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da0  08003da0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003da0  08003da0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003da0  08003da0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08003db4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003db4  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b72e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c12  00000000  00000000  0002b7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002d3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ed  00000000  00000000  0002e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e07  00000000  00000000  0002ea4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb48  00000000  00000000  00045854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000869a9  00000000  00000000  0005439c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003568  00000000  00000000  000dad48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000de2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d5c 	.word	0x08003d5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003d5c 	.word	0x08003d5c

0800014c <HAL_I2C_ListenCpltCallback>:
#define RxSize 1
uint8_t RxData[RxSize];
uint8_t count = 0;
//Callback function when device completed listening
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//Again device waiting for listening
	HAL_I2C_EnableListen_IT(&hi2c1);
 8000154:	4803      	ldr	r0, [pc, #12]	; (8000164 <HAL_I2C_ListenCpltCallback+0x18>)
 8000156:	f000 ffef 	bl	8001138 <HAL_I2C_EnableListen_IT>
}
 800015a:	bf00      	nop
 800015c:	3708      	adds	r7, #8
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
 8000162:	bf00      	nop
 8000164:	2000002c 	.word	0x2000002c

08000168 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
 8000170:	460b      	mov	r3, r1
 8000172:	70fb      	strb	r3, [r7, #3]
 8000174:	4613      	mov	r3, r2
 8000176:	803b      	strh	r3, [r7, #0]
  if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000178:	78fb      	ldrb	r3, [r7, #3]
 800017a:	2b01      	cmp	r3, #1
 800017c:	d106      	bne.n	800018c <HAL_I2C_AddrCallback+0x24>
  {
	  HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, RxData, RxSize, I2C_FIRST_AND_LAST_FRAME);
 800017e:	2308      	movs	r3, #8
 8000180:	2201      	movs	r2, #1
 8000182:	4905      	ldr	r1, [pc, #20]	; (8000198 <HAL_I2C_AddrCallback+0x30>)
 8000184:	4805      	ldr	r0, [pc, #20]	; (800019c <HAL_I2C_AddrCallback+0x34>)
 8000186:	f000 ff65 	bl	8001054 <HAL_I2C_Slave_Seq_Receive_IT>
  }
  else{
	  Error_Handler();
  }

}
 800018a:	e001      	b.n	8000190 <HAL_I2C_AddrCallback+0x28>
	  Error_Handler();
 800018c:	f000 f968 	bl	8000460 <Error_Handler>
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	20000028 	.word	0x20000028
 800019c:	2000002c 	.word	0x2000002c

080001a0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	if(count%=1){
 80001a8:	4b0d      	ldr	r3, [pc, #52]	; (80001e0 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	}
	else if(count%=0){
 80001ae:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	3300      	adds	r3, #0
 80001b4:	b2da      	uxtb	r2, r3
 80001b6:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 80001b8:	701a      	strb	r2, [r3, #0]
 80001ba:	4b09      	ldr	r3, [pc, #36]	; (80001e0 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d003      	beq.n	80001ca <HAL_I2C_SlaveRxCpltCallback+0x2a>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80001c2:	2100      	movs	r1, #0
 80001c4:	4807      	ldr	r0, [pc, #28]	; (80001e4 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80001c6:	f003 f8ad 	bl	8003324 <HAL_TIM_PWM_Stop>
	}

	count++;
 80001ca:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	3301      	adds	r3, #1
 80001d0:	b2da      	uxtb	r2, r3
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 80001d4:	701a      	strb	r2, [r3, #0]
}
 80001d6:	bf00      	nop
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000029 	.word	0x20000029
 80001e4:	20000080 	.word	0x20000080

080001e8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1);
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <HAL_I2C_ErrorCallback+0x18>)
 80001f2:	f000 ffa1 	bl	8001138 <HAL_I2C_EnableListen_IT>
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	2000002c 	.word	0x2000002c

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 fa52 	bl	80006b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f81c 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f000 f8f8 	bl	8000404 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000214:	f000 f852 	bl	80002bc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000218:	f000 f87e 	bl	8000318 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 800021c:	4b08      	ldr	r3, [pc, #32]	; (8000240 <main+0x3c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000224:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000226:	2100      	movs	r1, #0
 8000228:	4805      	ldr	r0, [pc, #20]	; (8000240 <main+0x3c>)
 800022a:	f002 ffd9 	bl	80031e0 <HAL_TIM_PWM_Start>
  if(HAL_I2C_EnableListen_IT(&hi2c1)!= HAL_OK){
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <main+0x40>)
 8000230:	f000 ff82 	bl	8001138 <HAL_I2C_EnableListen_IT>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <main+0x3a>
	  Error_Handler();
 800023a:	f000 f911 	bl	8000460 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023e:	e7fe      	b.n	800023e <main+0x3a>
 8000240:	20000080 	.word	0x20000080
 8000244:	2000002c 	.word	0x2000002c

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fd54 	bl	8003d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f002 fb0b 	bl	8002898 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000288:	f000 f8ea 	bl	8000460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000290:	2301      	movs	r3, #1
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fd79 	bl	8002d9c <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002b0:	f000 f8d6 	bl	8000460 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3740      	adds	r7, #64	; 0x40
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <MX_I2C1_Init+0x50>)
 80002c2:	4a13      	ldr	r2, [pc, #76]	; (8000310 <MX_I2C1_Init+0x54>)
 80002c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <MX_I2C1_Init+0x50>)
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <MX_I2C1_Init+0x58>)
 80002ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <MX_I2C1_Init+0x50>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 42;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <MX_I2C1_Init+0x50>)
 80002d4:	222a      	movs	r2, #42	; 0x2a
 80002d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <MX_I2C1_Init+0x50>)
 80002da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <MX_I2C1_Init+0x50>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <MX_I2C1_Init+0x50>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f8:	4804      	ldr	r0, [pc, #16]	; (800030c <MX_I2C1_Init+0x50>)
 80002fa:	f000 fd53 	bl	8000da4 <HAL_I2C_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000304:	f000 f8ac 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000002c 	.word	0x2000002c
 8000310:	40005400 	.word	0x40005400
 8000314:	000186a0 	.word	0x000186a0

08000318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08e      	sub	sp, #56	; 0x38
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032c:	f107 0320 	add.w	r3, r7, #32
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	60da      	str	r2, [r3, #12]
 8000342:	611a      	str	r2, [r3, #16]
 8000344:	615a      	str	r2, [r3, #20]
 8000346:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000348:	4b2d      	ldr	r3, [pc, #180]	; (8000400 <MX_TIM2_Init+0xe8>)
 800034a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <MX_TIM2_Init+0xe8>)
 8000352:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000356:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000358:	4b29      	ldr	r3, [pc, #164]	; (8000400 <MX_TIM2_Init+0xe8>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <MX_TIM2_Init+0xe8>)
 8000360:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000364:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000366:	4b26      	ldr	r3, [pc, #152]	; (8000400 <MX_TIM2_Init+0xe8>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800036c:	4b24      	ldr	r3, [pc, #144]	; (8000400 <MX_TIM2_Init+0xe8>)
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000372:	4823      	ldr	r0, [pc, #140]	; (8000400 <MX_TIM2_Init+0xe8>)
 8000374:	f002 fe8c 	bl	8003090 <HAL_TIM_Base_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800037e:	f000 f86f 	bl	8000460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000386:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800038c:	4619      	mov	r1, r3
 800038e:	481c      	ldr	r0, [pc, #112]	; (8000400 <MX_TIM2_Init+0xe8>)
 8000390:	f003 f8ee 	bl	8003570 <HAL_TIM_ConfigClockSource>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800039a:	f000 f861 	bl	8000460 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800039e:	4818      	ldr	r0, [pc, #96]	; (8000400 <MX_TIM2_Init+0xe8>)
 80003a0:	f002 fec5 	bl	800312e <HAL_TIM_PWM_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80003aa:	f000 f859 	bl	8000460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ae:	2300      	movs	r3, #0
 80003b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b6:	f107 0320 	add.w	r3, r7, #32
 80003ba:	4619      	mov	r1, r3
 80003bc:	4810      	ldr	r0, [pc, #64]	; (8000400 <MX_TIM2_Init+0xe8>)
 80003be:	f003 fc43 	bl	8003c48 <HAL_TIMEx_MasterConfigSynchronization>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80003c8:	f000 f84a 	bl	8000460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003cc:	2360      	movs	r3, #96	; 0x60
 80003ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	4619      	mov	r1, r3
 80003e2:	4807      	ldr	r0, [pc, #28]	; (8000400 <MX_TIM2_Init+0xe8>)
 80003e4:	f003 f802 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003ee:	f000 f837 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003f2:	4803      	ldr	r0, [pc, #12]	; (8000400 <MX_TIM2_Init+0xe8>)
 80003f4:	f000 f8ce 	bl	8000594 <HAL_TIM_MspPostInit>

}
 80003f8:	bf00      	nop
 80003fa:	3738      	adds	r7, #56	; 0x38
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000080 	.word	0x20000080

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_GPIO_Init+0x58>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a13      	ldr	r2, [pc, #76]	; (800045c <MX_GPIO_Init+0x58>)
 8000410:	f043 0320 	orr.w	r3, r3, #32
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_GPIO_Init+0x58>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0320 	and.w	r3, r3, #32
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_GPIO_Init+0x58>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a0d      	ldr	r2, [pc, #52]	; (800045c <MX_GPIO_Init+0x58>)
 8000428:	f043 0304 	orr.w	r3, r3, #4
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_GPIO_Init+0x58>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0304 	and.w	r3, r3, #4
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_GPIO_Init+0x58>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a07      	ldr	r2, [pc, #28]	; (800045c <MX_GPIO_Init+0x58>)
 8000440:	f043 0308 	orr.w	r3, r3, #8
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <MX_GPIO_Init+0x58>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0308 	and.w	r3, r3, #8
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40021000 	.word	0x40021000

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	e7fe      	b.n	8000468 <Error_Handler+0x8>
	...

0800046c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <HAL_MspInit+0x5c>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <HAL_MspInit+0x5c>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <HAL_MspInit+0x60>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <HAL_MspInit+0x60>)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010000 	.word	0x40010000

080004d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a19      	ldr	r2, [pc, #100]	; (8000550 <HAL_I2C_MspInit+0x80>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d12b      	bne.n	8000548 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <HAL_I2C_MspInit+0x84>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a17      	ldr	r2, [pc, #92]	; (8000554 <HAL_I2C_MspInit+0x84>)
 80004f6:	f043 0308 	orr.w	r3, r3, #8
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_I2C_MspInit+0x84>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0308 	and.w	r3, r3, #8
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000508:	23c0      	movs	r3, #192	; 0xc0
 800050a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800050c:	2312      	movs	r3, #18
 800050e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	480f      	ldr	r0, [pc, #60]	; (8000558 <HAL_I2C_MspInit+0x88>)
 800051c:	f000 fabe 	bl	8000a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_I2C_MspInit+0x84>)
 8000522:	69db      	ldr	r3, [r3, #28]
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_I2C_MspInit+0x84>)
 8000526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800052a:	61d3      	str	r3, [r2, #28]
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_I2C_MspInit+0x84>)
 800052e:	69db      	ldr	r3, [r3, #28]
 8000530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000538:	2200      	movs	r2, #0
 800053a:	2100      	movs	r1, #0
 800053c:	201f      	movs	r0, #31
 800053e:	f000 f9f0 	bl	8000922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000542:	201f      	movs	r0, #31
 8000544:	f000 fa09 	bl	800095a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40005400 	.word	0x40005400
 8000554:	40021000 	.word	0x40021000
 8000558:	40010c00 	.word	0x40010c00

0800055c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800056c:	d10b      	bne.n	8000586 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <HAL_TIM_Base_MspInit+0x34>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_TIM_Base_MspInit+0x34>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_TIM_Base_MspInit+0x34>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b2:	d117      	bne.n	80005e4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <HAL_TIM_MspPostInit+0x58>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <HAL_TIM_MspPostInit+0x58>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_TIM_MspPostInit+0x58>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005cc:	2301      	movs	r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <HAL_TIM_MspPostInit+0x5c>)
 80005e0:	f000 fa5c 	bl	8000a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f8:	e7fe      	b.n	80005f8 <NMI_Handler+0x4>

080005fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <MemManage_Handler+0x4>

08000606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <UsageFault_Handler+0x4>

08000612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063a:	f000 f87f 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <I2C1_EV_IRQHandler+0x10>)
 800064a:	f000 fdaa 	bl	80011a2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000002c 	.word	0x2000002c

08000658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000664:	f7ff fff8 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480b      	ldr	r0, [pc, #44]	; (8000698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800066a:	490c      	ldr	r1, [pc, #48]	; (800069c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800066c:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000680:	4c09      	ldr	r4, [pc, #36]	; (80006a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f003 fb41 	bl	8003d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff fdb7 	bl	8000204 <main>
  bx lr
 8000696:	4770      	bx	lr
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a0:	08003da8 	.word	0x08003da8
  ldr r2, =_sbss
 80006a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a8:	200000cc 	.word	0x200000cc

080006ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC1_2_IRQHandler>
	...

080006b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_Init+0x28>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <HAL_Init+0x28>)
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 f923 	bl	800090c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c6:	200f      	movs	r0, #15
 80006c8:	f000 f808 	bl	80006dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006cc:	f7ff fece 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40022000 	.word	0x40022000

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_InitTick+0x54>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_InitTick+0x58>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f93b 	bl	8000976 <HAL_SYSTICK_Config>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	e00e      	b.n	8000728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d80a      	bhi.n	8000726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000710:	2200      	movs	r2, #0
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	f04f 30ff 	mov.w	r0, #4294967295
 8000718:	f000 f903 	bl	8000922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800071c:	4a06      	ldr	r2, [pc, #24]	; (8000738 <HAL_InitTick+0x5c>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	e000      	b.n	8000728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000000 	.word	0x20000000
 8000734:	20000008 	.word	0x20000008
 8000738:	20000004 	.word	0x20000004

0800073c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_IncTick+0x1c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_IncTick+0x20>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <HAL_IncTick+0x20>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000008 	.word	0x20000008
 800075c:	200000c8 	.word	0x200000c8

08000760 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <HAL_GetTick+0x10>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	200000c8 	.word	0x200000c8

08000774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800079c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_GetPriorityGrouping+0x18>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	f003 0307 	and.w	r3, r3, #7
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db0b      	blt.n	8000802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 021f 	and.w	r2, r3, #31
 80007f0:	4906      	ldr	r1, [pc, #24]	; (800080c <__NVIC_EnableIRQ+0x34>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	095b      	lsrs	r3, r3, #5
 80007f8:	2001      	movs	r0, #1
 80007fa:	fa00 f202 	lsl.w	r2, r0, r2
 80007fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d8:	d301      	bcc.n	80008de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008da:	2301      	movs	r3, #1
 80008dc:	e00f      	b.n	80008fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <SysTick_Config+0x40>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e6:	210f      	movs	r1, #15
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f7ff ff90 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <SysTick_Config+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SysTick_Config+0x40>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff2d 	bl	8000774 <__NVIC_SetPriorityGrouping>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000934:	f7ff ff42 	bl	80007bc <__NVIC_GetPriorityGrouping>
 8000938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f7ff ff90 	bl	8000864 <NVIC_EncodePriority>
 8000944:	4602      	mov	r2, r0
 8000946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5f 	bl	8000810 <__NVIC_SetPriority>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff35 	bl	80007d8 <__NVIC_EnableIRQ>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ffa2 	bl	80008c8 <SysTick_Config>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d005      	beq.n	80009b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2204      	movs	r2, #4
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	e051      	b.n	8000a58 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f022 020e 	bic.w	r2, r2, #14
 80009c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f022 0201 	bic.w	r2, r2, #1
 80009d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <HAL_DMA_Abort_IT+0xd4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d029      	beq.n	8000a32 <HAL_DMA_Abort_IT+0xa2>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <HAL_DMA_Abort_IT+0xd8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d022      	beq.n	8000a2e <HAL_DMA_Abort_IT+0x9e>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <HAL_DMA_Abort_IT+0xdc>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01a      	beq.n	8000a28 <HAL_DMA_Abort_IT+0x98>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <HAL_DMA_Abort_IT+0xe0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d012      	beq.n	8000a22 <HAL_DMA_Abort_IT+0x92>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <HAL_DMA_Abort_IT+0xe4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d00a      	beq.n	8000a1c <HAL_DMA_Abort_IT+0x8c>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <HAL_DMA_Abort_IT+0xe8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d102      	bne.n	8000a16 <HAL_DMA_Abort_IT+0x86>
 8000a10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a14:	e00e      	b.n	8000a34 <HAL_DMA_Abort_IT+0xa4>
 8000a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a1a:	e00b      	b.n	8000a34 <HAL_DMA_Abort_IT+0xa4>
 8000a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a20:	e008      	b.n	8000a34 <HAL_DMA_Abort_IT+0xa4>
 8000a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a26:	e005      	b.n	8000a34 <HAL_DMA_Abort_IT+0xa4>
 8000a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2c:	e002      	b.n	8000a34 <HAL_DMA_Abort_IT+0xa4>
 8000a2e:	2310      	movs	r3, #16
 8000a30:	e000      	b.n	8000a34 <HAL_DMA_Abort_IT+0xa4>
 8000a32:	2301      	movs	r3, #1
 8000a34:	4a11      	ldr	r2, [pc, #68]	; (8000a7c <HAL_DMA_Abort_IT+0xec>)
 8000a36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	4798      	blx	r3
    } 
  }
  return status;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40020008 	.word	0x40020008
 8000a68:	4002001c 	.word	0x4002001c
 8000a6c:	40020030 	.word	0x40020030
 8000a70:	40020044 	.word	0x40020044
 8000a74:	40020058 	.word	0x40020058
 8000a78:	4002006c 	.word	0x4002006c
 8000a7c:	40020000 	.word	0x40020000

08000a80 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a8e:	b2db      	uxtb	r3, r3
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
	...

08000a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b08b      	sub	sp, #44	; 0x2c
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aae:	e169      	b.n	8000d84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	f040 8158 	bne.w	8000d7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	4a9a      	ldr	r2, [pc, #616]	; (8000d3c <HAL_GPIO_Init+0x2a0>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d05e      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000ad8:	4a98      	ldr	r2, [pc, #608]	; (8000d3c <HAL_GPIO_Init+0x2a0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d875      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000ade:	4a98      	ldr	r2, [pc, #608]	; (8000d40 <HAL_GPIO_Init+0x2a4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d058      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000ae4:	4a96      	ldr	r2, [pc, #600]	; (8000d40 <HAL_GPIO_Init+0x2a4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d86f      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000aea:	4a96      	ldr	r2, [pc, #600]	; (8000d44 <HAL_GPIO_Init+0x2a8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d052      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000af0:	4a94      	ldr	r2, [pc, #592]	; (8000d44 <HAL_GPIO_Init+0x2a8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d869      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000af6:	4a94      	ldr	r2, [pc, #592]	; (8000d48 <HAL_GPIO_Init+0x2ac>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d04c      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000afc:	4a92      	ldr	r2, [pc, #584]	; (8000d48 <HAL_GPIO_Init+0x2ac>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d863      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000b02:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <HAL_GPIO_Init+0x2b0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d046      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
 8000b08:	4a90      	ldr	r2, [pc, #576]	; (8000d4c <HAL_GPIO_Init+0x2b0>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d85d      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000b0e:	2b12      	cmp	r3, #18
 8000b10:	d82a      	bhi.n	8000b68 <HAL_GPIO_Init+0xcc>
 8000b12:	2b12      	cmp	r3, #18
 8000b14:	d859      	bhi.n	8000bca <HAL_GPIO_Init+0x12e>
 8000b16:	a201      	add	r2, pc, #4	; (adr r2, 8000b1c <HAL_GPIO_Init+0x80>)
 8000b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1c:	08000b97 	.word	0x08000b97
 8000b20:	08000b71 	.word	0x08000b71
 8000b24:	08000b83 	.word	0x08000b83
 8000b28:	08000bc5 	.word	0x08000bc5
 8000b2c:	08000bcb 	.word	0x08000bcb
 8000b30:	08000bcb 	.word	0x08000bcb
 8000b34:	08000bcb 	.word	0x08000bcb
 8000b38:	08000bcb 	.word	0x08000bcb
 8000b3c:	08000bcb 	.word	0x08000bcb
 8000b40:	08000bcb 	.word	0x08000bcb
 8000b44:	08000bcb 	.word	0x08000bcb
 8000b48:	08000bcb 	.word	0x08000bcb
 8000b4c:	08000bcb 	.word	0x08000bcb
 8000b50:	08000bcb 	.word	0x08000bcb
 8000b54:	08000bcb 	.word	0x08000bcb
 8000b58:	08000bcb 	.word	0x08000bcb
 8000b5c:	08000bcb 	.word	0x08000bcb
 8000b60:	08000b79 	.word	0x08000b79
 8000b64:	08000b8d 	.word	0x08000b8d
 8000b68:	4a79      	ldr	r2, [pc, #484]	; (8000d50 <HAL_GPIO_Init+0x2b4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d013      	beq.n	8000b96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b6e:	e02c      	b.n	8000bca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e029      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e024      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	3308      	adds	r3, #8
 8000b88:	623b      	str	r3, [r7, #32]
          break;
 8000b8a:	e01f      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	330c      	adds	r3, #12
 8000b92:	623b      	str	r3, [r7, #32]
          break;
 8000b94:	e01a      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	623b      	str	r3, [r7, #32]
          break;
 8000ba2:	e013      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d105      	bne.n	8000bb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bac:	2308      	movs	r3, #8
 8000bae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	611a      	str	r2, [r3, #16]
          break;
 8000bb6:	e009      	b.n	8000bcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	615a      	str	r2, [r3, #20]
          break;
 8000bc2:	e003      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
          break;
 8000bc8:	e000      	b.n	8000bcc <HAL_GPIO_Init+0x130>
          break;
 8000bca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	2bff      	cmp	r3, #255	; 0xff
 8000bd0:	d801      	bhi.n	8000bd6 <HAL_GPIO_Init+0x13a>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	e001      	b.n	8000bda <HAL_GPIO_Init+0x13e>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2bff      	cmp	r3, #255	; 0xff
 8000be0:	d802      	bhi.n	8000be8 <HAL_GPIO_Init+0x14c>
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	e002      	b.n	8000bee <HAL_GPIO_Init+0x152>
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	3b08      	subs	r3, #8
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	210f      	movs	r1, #15
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	6a39      	ldr	r1, [r7, #32]
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 80b1 	beq.w	8000d7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1c:	4b4d      	ldr	r3, [pc, #308]	; (8000d54 <HAL_GPIO_Init+0x2b8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a4c      	ldr	r2, [pc, #304]	; (8000d54 <HAL_GPIO_Init+0x2b8>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <HAL_GPIO_Init+0x2b8>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c34:	4a48      	ldr	r2, [pc, #288]	; (8000d58 <HAL_GPIO_Init+0x2bc>)
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a40      	ldr	r2, [pc, #256]	; (8000d5c <HAL_GPIO_Init+0x2c0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d013      	beq.n	8000c88 <HAL_GPIO_Init+0x1ec>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a3f      	ldr	r2, [pc, #252]	; (8000d60 <HAL_GPIO_Init+0x2c4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d00d      	beq.n	8000c84 <HAL_GPIO_Init+0x1e8>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a3e      	ldr	r2, [pc, #248]	; (8000d64 <HAL_GPIO_Init+0x2c8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d007      	beq.n	8000c80 <HAL_GPIO_Init+0x1e4>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a3d      	ldr	r2, [pc, #244]	; (8000d68 <HAL_GPIO_Init+0x2cc>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d101      	bne.n	8000c7c <HAL_GPIO_Init+0x1e0>
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9a:	492f      	ldr	r1, [pc, #188]	; (8000d58 <HAL_GPIO_Init+0x2bc>)
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	492c      	ldr	r1, [pc, #176]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	608b      	str	r3, [r1, #8]
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4928      	ldr	r1, [pc, #160]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d006      	beq.n	8000cea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	4922      	ldr	r1, [pc, #136]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	60cb      	str	r3, [r1, #12]
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	491e      	ldr	r1, [pc, #120]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4918      	ldr	r1, [pc, #96]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
 8000d10:	e006      	b.n	8000d20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	4914      	ldr	r1, [pc, #80]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d021      	beq.n	8000d70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	490e      	ldr	r1, [pc, #56]	; (8000d6c <HAL_GPIO_Init+0x2d0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
 8000d38:	e021      	b.n	8000d7e <HAL_GPIO_Init+0x2e2>
 8000d3a:	bf00      	nop
 8000d3c:	10320000 	.word	0x10320000
 8000d40:	10310000 	.word	0x10310000
 8000d44:	10220000 	.word	0x10220000
 8000d48:	10210000 	.word	0x10210000
 8000d4c:	10120000 	.word	0x10120000
 8000d50:	10110000 	.word	0x10110000
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	40010800 	.word	0x40010800
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	40011000 	.word	0x40011000
 8000d68:	40011400 	.word	0x40011400
 8000d6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	4909      	ldr	r1, [pc, #36]	; (8000da0 <HAL_GPIO_Init+0x304>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	3301      	adds	r3, #1
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f47f ae8e 	bne.w	8000ab0 <HAL_GPIO_Init+0x14>
  }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	372c      	adds	r7, #44	; 0x2c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	40010400 	.word	0x40010400

08000da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e12b      	b.n	800100e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d106      	bne.n	8000dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fb80 	bl	80004d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2224      	movs	r2, #36	; 0x24
 8000dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 0201 	bic.w	r2, r2, #1
 8000de6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000df6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e08:	f002 f910 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8000e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	4a81      	ldr	r2, [pc, #516]	; (8001018 <HAL_I2C_Init+0x274>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d807      	bhi.n	8000e28 <HAL_I2C_Init+0x84>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4a80      	ldr	r2, [pc, #512]	; (800101c <HAL_I2C_Init+0x278>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	bf94      	ite	ls
 8000e20:	2301      	movls	r3, #1
 8000e22:	2300      	movhi	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	e006      	b.n	8000e36 <HAL_I2C_Init+0x92>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4a7d      	ldr	r2, [pc, #500]	; (8001020 <HAL_I2C_Init+0x27c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	bf94      	ite	ls
 8000e30:	2301      	movls	r3, #1
 8000e32:	2300      	movhi	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e0e7      	b.n	800100e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4a78      	ldr	r2, [pc, #480]	; (8001024 <HAL_I2C_Init+0x280>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	0c9b      	lsrs	r3, r3, #18
 8000e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4a6a      	ldr	r2, [pc, #424]	; (8001018 <HAL_I2C_Init+0x274>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d802      	bhi.n	8000e78 <HAL_I2C_Init+0xd4>
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	e009      	b.n	8000e8c <HAL_I2C_Init+0xe8>
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e7e:	fb02 f303 	mul.w	r3, r2, r3
 8000e82:	4a69      	ldr	r2, [pc, #420]	; (8001028 <HAL_I2C_Init+0x284>)
 8000e84:	fba2 2303 	umull	r2, r3, r2, r3
 8000e88:	099b      	lsrs	r3, r3, #6
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	430b      	orrs	r3, r1
 8000e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	495c      	ldr	r1, [pc, #368]	; (8001018 <HAL_I2C_Init+0x274>)
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d819      	bhi.n	8000ee0 <HAL_I2C_Init+0x13c>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	1e59      	subs	r1, r3, #1
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eba:	1c59      	adds	r1, r3, #1
 8000ebc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ec0:	400b      	ands	r3, r1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00a      	beq.n	8000edc <HAL_I2C_Init+0x138>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	1e59      	subs	r1, r3, #1
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eda:	e051      	b.n	8000f80 <HAL_I2C_Init+0x1dc>
 8000edc:	2304      	movs	r3, #4
 8000ede:	e04f      	b.n	8000f80 <HAL_I2C_Init+0x1dc>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d111      	bne.n	8000f0c <HAL_I2C_Init+0x168>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1e58      	subs	r0, r3, #1
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6859      	ldr	r1, [r3, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	440b      	add	r3, r1
 8000ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bf0c      	ite	eq
 8000f04:	2301      	moveq	r3, #1
 8000f06:	2300      	movne	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	e012      	b.n	8000f32 <HAL_I2C_Init+0x18e>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	1e58      	subs	r0, r3, #1
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6859      	ldr	r1, [r3, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	0099      	lsls	r1, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f22:	3301      	adds	r3, #1
 8000f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bf0c      	ite	eq
 8000f2c:	2301      	moveq	r3, #1
 8000f2e:	2300      	movne	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_I2C_Init+0x196>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e022      	b.n	8000f80 <HAL_I2C_Init+0x1dc>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10e      	bne.n	8000f60 <HAL_I2C_Init+0x1bc>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1e58      	subs	r0, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6859      	ldr	r1, [r3, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	440b      	add	r3, r1
 8000f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f54:	3301      	adds	r3, #1
 8000f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f5e:	e00f      	b.n	8000f80 <HAL_I2C_Init+0x1dc>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1e58      	subs	r0, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6859      	ldr	r1, [r3, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	0099      	lsls	r1, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f76:	3301      	adds	r3, #1
 8000f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	6809      	ldr	r1, [r1, #0]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6911      	ldr	r1, [r2, #16]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68d2      	ldr	r2, [r2, #12]
 8000fba:	4311      	orrs	r1, r2
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	000186a0 	.word	0x000186a0
 800101c:	001e847f 	.word	0x001e847f
 8001020:	003d08ff 	.word	0x003d08ff
 8001024:	431bde83 	.word	0x431bde83
 8001028:	10624dd3 	.word	0x10624dd3

0800102c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103e:	2b80      	cmp	r3, #128	; 0x80
 8001040:	d103      	bne.n	800104a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	4613      	mov	r3, r2
 8001062:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001070:	2b28      	cmp	r3, #40	; 0x28
 8001072:	d15b      	bne.n	800112c <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e054      	b.n	800112e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800108e:	2302      	movs	r3, #2
 8001090:	e04d      	b.n	800112e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d007      	beq.n	80010b8 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	222a      	movs	r2, #42	; 0x2a
 80010cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2220      	movs	r2, #32
 80010d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	88fa      	ldrh	r2, [r7, #6]
 80010e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001126:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	e000      	b.n	800112e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800112c:	2302      	movs	r3, #2
  }
}
 800112e:	4618      	mov	r0, r3
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b20      	cmp	r3, #32
 800114a:	d124      	bne.n	8001196 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2228      	movs	r2, #40	; 0x28
 8001150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d007      	beq.n	8001172 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001180:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001190:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001196:	2302      	movs	r3, #2
  }
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b088      	sub	sp, #32
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ba:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80011c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011ca:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2b10      	cmp	r3, #16
 80011d0:	d003      	beq.n	80011da <HAL_I2C_EV_IRQHandler+0x38>
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	2b40      	cmp	r3, #64	; 0x40
 80011d6:	f040 80b1 	bne.w	800133c <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10d      	bne.n	8001210 <HAL_I2C_EV_IRQHandler+0x6e>
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80011fa:	d003      	beq.n	8001204 <HAL_I2C_EV_IRQHandler+0x62>
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001202:	d101      	bne.n	8001208 <HAL_I2C_EV_IRQHandler+0x66>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <HAL_I2C_EV_IRQHandler+0x68>
 8001208:	2300      	movs	r3, #0
 800120a:	2b01      	cmp	r3, #1
 800120c:	f000 8114 	beq.w	8001438 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00b      	beq.n	8001232 <HAL_I2C_EV_IRQHandler+0x90>
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f001 fb1d 	bl	8002864 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fc91 	bl	8001b52 <I2C_Master_SB>
 8001230:	e083      	b.n	800133a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_I2C_EV_IRQHandler+0xac>
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fd08 	bl	8001c5c <I2C_Master_ADD10>
 800124c:	e075      	b.n	800133a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_I2C_EV_IRQHandler+0xc8>
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fd23 	bl	8001cae <I2C_Master_ADDR>
 8001268:	e067      	b.n	800133a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d036      	beq.n	80012e2 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800127e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001282:	f000 80db 	beq.w	800143c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00d      	beq.n	80012ac <HAL_I2C_EV_IRQHandler+0x10a>
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001296:	2b00      	cmp	r3, #0
 8001298:	d008      	beq.n	80012ac <HAL_I2C_EV_IRQHandler+0x10a>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d103      	bne.n	80012ac <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f905 	bl	80014b4 <I2C_MasterTransmit_TXE>
 80012aa:	e046      	b.n	800133a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 80c2 	beq.w	800143c <HAL_I2C_EV_IRQHandler+0x29a>
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80bc 	beq.w	800143c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	2b21      	cmp	r3, #33	; 0x21
 80012c8:	d103      	bne.n	80012d2 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f98e 	bl	80015ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012d0:	e0b4      	b.n	800143c <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	2b40      	cmp	r3, #64	; 0x40
 80012d6:	f040 80b1 	bne.w	800143c <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f9fc 	bl	80016d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012e0:	e0ac      	b.n	800143c <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012f0:	f000 80a4 	beq.w	800143c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00d      	beq.n	800131a <HAL_I2C_EV_IRQHandler+0x178>
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <HAL_I2C_EV_IRQHandler+0x178>
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fa78 	bl	8001808 <I2C_MasterReceive_RXNE>
 8001318:	e00f      	b.n	800133a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 808b 	beq.w	800143c <HAL_I2C_EV_IRQHandler+0x29a>
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8085 	beq.w	800143c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fb23 	bl	800197e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001338:	e080      	b.n	800143c <HAL_I2C_EV_IRQHandler+0x29a>
 800133a:	e07f      	b.n	800143c <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	e007      	b.n	800135e <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d011      	beq.n	800138c <HAL_I2C_EV_IRQHandler+0x1ea>
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00c      	beq.n	800138c <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001382:	69b9      	ldr	r1, [r7, #24]
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fee9 	bl	800215c <I2C_Slave_ADDR>
 800138a:	e05a      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <HAL_I2C_EV_IRQHandler+0x206>
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 ff23 	bl	80021ec <I2C_Slave_STOPF>
 80013a6:	e04c      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	2b21      	cmp	r3, #33	; 0x21
 80013ac:	d002      	beq.n	80013b4 <HAL_I2C_EV_IRQHandler+0x212>
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	2b29      	cmp	r3, #41	; 0x29
 80013b2:	d120      	bne.n	80013f6 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00d      	beq.n	80013da <HAL_I2C_EV_IRQHandler+0x238>
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_I2C_EV_IRQHandler+0x238>
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d103      	bne.n	80013da <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fe06 	bl	8001fe4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013d8:	e032      	b.n	8001440 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d02d      	beq.n	8001440 <HAL_I2C_EV_IRQHandler+0x29e>
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d028      	beq.n	8001440 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fe35 	bl	800205e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013f4:	e024      	b.n	8001440 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00d      	beq.n	800141c <HAL_I2C_EV_IRQHandler+0x27a>
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <HAL_I2C_EV_IRQHandler+0x27a>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fe42 	bl	800209e <I2C_SlaveReceive_RXNE>
 800141a:	e012      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00d      	beq.n	8001442 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fe72 	bl	800211a <I2C_SlaveReceive_BTF>
 8001436:	e004      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001440:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d150      	bne.n	800157c <I2C_MasterTransmit_TXE+0xc8>
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	2b21      	cmp	r3, #33	; 0x21
 80014de:	d14d      	bne.n	800157c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d01d      	beq.n	8001522 <I2C_MasterTransmit_TXE+0x6e>
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b20      	cmp	r3, #32
 80014ea:	d01a      	beq.n	8001522 <I2C_MasterTransmit_TXE+0x6e>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014f2:	d016      	beq.n	8001522 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001502:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2211      	movs	r2, #17
 8001508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2220      	movs	r2, #32
 8001516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ff94 	bl	8001448 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001520:	e060      	b.n	80015e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001530:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001540:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2220      	movs	r2, #32
 800154c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b40      	cmp	r3, #64	; 0x40
 800155a:	d107      	bne.n	800156c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff8a 	bl	800147e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800156a:	e03b      	b.n	80015e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff67 	bl	8001448 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800157a:	e033      	b.n	80015e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b21      	cmp	r3, #33	; 0x21
 8001580:	d005      	beq.n	800158e <I2C_MasterTransmit_TXE+0xda>
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	2b40      	cmp	r3, #64	; 0x40
 8001586:	d12d      	bne.n	80015e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b22      	cmp	r3, #34	; 0x22
 800158c:	d12a      	bne.n	80015e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d108      	bne.n	80015aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80015a8:	e01c      	b.n	80015e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b40      	cmp	r3, #64	; 0x40
 80015b4:	d103      	bne.n	80015be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f88e 	bl	80016d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80015bc:	e012      	b.n	80015e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80015e2:	e7ff      	b.n	80015e4 <I2C_MasterTransmit_TXE+0x130>
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b21      	cmp	r3, #33	; 0x21
 8001604:	d164      	bne.n	80016d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160a:	b29b      	uxth	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d012      	beq.n	8001636 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162a:	b29b      	uxth	r3, r3
 800162c:	3b01      	subs	r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001634:	e04c      	b.n	80016d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b08      	cmp	r3, #8
 800163a:	d01d      	beq.n	8001678 <I2C_MasterTransmit_BTF+0x8c>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b20      	cmp	r3, #32
 8001640:	d01a      	beq.n	8001678 <I2C_MasterTransmit_BTF+0x8c>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001648:	d016      	beq.n	8001678 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001658:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2211      	movs	r2, #17
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2220      	movs	r2, #32
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fee9 	bl	8001448 <HAL_I2C_MasterTxCpltCallback>
}
 8001676:	e02b      	b.n	80016d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001686:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001696:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2220      	movs	r2, #32
 80016a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b40      	cmp	r3, #64	; 0x40
 80016b0:	d107      	bne.n	80016c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fedf 	bl	800147e <HAL_I2C_MemTxCpltCallback>
}
 80016c0:	e006      	b.n	80016d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff febc 	bl	8001448 <HAL_I2C_MasterTxCpltCallback>
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d11d      	bne.n	800172c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d10b      	bne.n	8001710 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001708:	1c9a      	adds	r2, r3, #2
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800170e:	e077      	b.n	8001800 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001714:	b29b      	uxth	r3, r3
 8001716:	121b      	asrs	r3, r3, #8
 8001718:	b2da      	uxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	651a      	str	r2, [r3, #80]	; 0x50
}
 800172a:	e069      	b.n	8001800 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10b      	bne.n	800174c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001738:	b2da      	uxtb	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	651a      	str	r2, [r3, #80]	; 0x50
}
 800174a:	e059      	b.n	8001800 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001750:	2b02      	cmp	r3, #2
 8001752:	d152      	bne.n	80017fa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b22      	cmp	r3, #34	; 0x22
 8001758:	d10d      	bne.n	8001776 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001768:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001774:	e044      	b.n	8001800 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d015      	beq.n	80017ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	2b21      	cmp	r3, #33	; 0x21
 8001784:	d112      	bne.n	80017ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80017aa:	e029      	b.n	8001800 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d124      	bne.n	8001800 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b21      	cmp	r3, #33	; 0x21
 80017ba:	d121      	bne.n	8001800 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2220      	movs	r2, #32
 80017e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fe43 	bl	800147e <HAL_I2C_MemTxCpltCallback>
}
 80017f8:	e002      	b.n	8001800 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fc16 	bl	800102c <I2C_Flush_DR>
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b22      	cmp	r3, #34	; 0x22
 800181a:	f040 80ac 	bne.w	8001976 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001822:	b29b      	uxth	r3, r3
 8001824:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d921      	bls.n	8001870 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	2b03      	cmp	r3, #3
 800185a:	f040 808c 	bne.w	8001976 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800186c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800186e:	e082      	b.n	8001976 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	2b02      	cmp	r3, #2
 8001876:	d075      	beq.n	8001964 <I2C_MasterReceive_RXNE+0x15c>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d002      	beq.n	8001884 <I2C_MasterReceive_RXNE+0x7c>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d16f      	bne.n	8001964 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 ffbb 	bl	8002800 <I2C_WaitOnSTOPRequestThroughIT>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d142      	bne.n	8001916 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800189e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b40      	cmp	r3, #64	; 0x40
 80018e8:	d10a      	bne.n	8001900 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff fdc9 	bl	8001490 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80018fe:	e03a      	b.n	8001976 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2212      	movs	r2, #18
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fda3 	bl	800145a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001914:	e02f      	b.n	8001976 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001924:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001942:	b29b      	uxth	r3, r3
 8001944:	3b01      	subs	r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7fe fc43 	bl	80001e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001962:	e008      	b.n	8001976 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001972:	605a      	str	r2, [r3, #4]
}
 8001974:	e7ff      	b.n	8001976 <I2C_MasterReceive_RXNE+0x16e>
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	2b04      	cmp	r3, #4
 8001994:	d11b      	bne.n	80019ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80019cc:	e0bd      	b.n	8001b4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d129      	bne.n	8001a2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d00a      	beq.n	8001a04 <I2C_MasterReceive_BTF+0x86>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d007      	beq.n	8001a04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001a2a:	e08e      	b.n	8001b4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d176      	bne.n	8001b24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d002      	beq.n	8001a42 <I2C_MasterReceive_BTF+0xc4>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d108      	bne.n	8001a54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e019      	b.n	8001a88 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d002      	beq.n	8001a60 <I2C_MasterReceive_BTF+0xe2>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d108      	bne.n	8001a72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e00a      	b.n	8001a88 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d007      	beq.n	8001a88 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ae2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b40      	cmp	r3, #64	; 0x40
 8001af6:	d10a      	bne.n	8001b0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fcc2 	bl	8001490 <HAL_I2C_MemRxCpltCallback>
}
 8001b0c:	e01d      	b.n	8001b4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2212      	movs	r2, #18
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fc9c 	bl	800145a <HAL_I2C_MasterRxCpltCallback>
}
 8001b22:	e012      	b.n	8001b4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	d117      	bne.n	8001b96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001b80:	e067      	b.n	8001c52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	611a      	str	r2, [r3, #16]
}
 8001b94:	e05d      	b.n	8001c52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b9e:	d133      	bne.n	8001c08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b21      	cmp	r3, #33	; 0x21
 8001baa:	d109      	bne.n	8001bc0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bbc:	611a      	str	r2, [r3, #16]
 8001bbe:	e008      	b.n	8001bd2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <I2C_Master_SB+0x92>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d108      	bne.n	8001bf6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d032      	beq.n	8001c52 <I2C_Master_SB+0x100>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d02d      	beq.n	8001c52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c04:	605a      	str	r2, [r3, #4]
}
 8001c06:	e024      	b.n	8001c52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10e      	bne.n	8001c2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	11db      	asrs	r3, r3, #7
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 0306 	and.w	r3, r3, #6
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f063 030f 	orn	r3, r3, #15
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	611a      	str	r2, [r3, #16]
}
 8001c2c:	e011      	b.n	8001c52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d10d      	bne.n	8001c52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	11db      	asrs	r3, r3, #7
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f003 0306 	and.w	r3, r3, #6
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f063 030e 	orn	r3, r3, #14
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	611a      	str	r2, [r3, #16]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <I2C_Master_ADD10+0x26>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d108      	bne.n	8001c94 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00c      	beq.n	8001ca4 <I2C_Master_ADD10+0x48>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca2:	605a      	str	r2, [r3, #4]
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b091      	sub	sp, #68	; 0x44
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b22      	cmp	r3, #34	; 0x22
 8001cd6:	f040 8174 	bne.w	8001fc2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10f      	bne.n	8001d02 <I2C_Master_ADDR+0x54>
 8001ce2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ce6:	2b40      	cmp	r3, #64	; 0x40
 8001ce8:	d10b      	bne.n	8001d02 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8001cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d00:	e16b      	b.n	8001fda <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11d      	bne.n	8001d46 <I2C_Master_ADDR+0x98>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d12:	d118      	bne.n	8001d46 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d38:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	651a      	str	r2, [r3, #80]	; 0x50
 8001d44:	e149      	b.n	8001fda <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d113      	bne.n	8001d78 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e120      	b.n	8001fba <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	f040 808a 	bne.w	8001e98 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d8a:	d137      	bne.n	8001dfc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001daa:	d113      	bne.n	8001dd4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	e0f2      	b.n	8001fba <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	623b      	str	r3, [r7, #32]
 8001de8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e0de      	b.n	8001fba <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d02e      	beq.n	8001e60 <I2C_Master_ADDR+0x1b2>
 8001e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d02b      	beq.n	8001e60 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d102      	bne.n	8001e14 <I2C_Master_ADDR+0x166>
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d125      	bne.n	8001e60 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d00e      	beq.n	8001e38 <I2C_Master_ADDR+0x18a>
 8001e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d00b      	beq.n	8001e38 <I2C_Master_ADDR+0x18a>
 8001e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d008      	beq.n	8001e38 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e007      	b.n	8001e48 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e46:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	e0ac      	b.n	8001fba <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e090      	b.n	8001fba <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d158      	bne.n	8001f54 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d021      	beq.n	8001eec <I2C_Master_ADDR+0x23e>
 8001ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d01e      	beq.n	8001eec <I2C_Master_ADDR+0x23e>
 8001eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb0:	2b10      	cmp	r3, #16
 8001eb2:	d01b      	beq.n	8001eec <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ec2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e012      	b.n	8001f12 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001efa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f20:	d14b      	bne.n	8001fba <I2C_Master_ADDR+0x30c>
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f28:	d00b      	beq.n	8001f42 <I2C_Master_ADDR+0x294>
 8001f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d008      	beq.n	8001f42 <I2C_Master_ADDR+0x294>
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d005      	beq.n	8001f42 <I2C_Master_ADDR+0x294>
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d002      	beq.n	8001f42 <I2C_Master_ADDR+0x294>
 8001f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d13b      	bne.n	8001fba <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	e032      	b.n	8001fba <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f62:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f72:	d117      	bne.n	8001fa4 <I2C_Master_ADDR+0x2f6>
 8001f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f7a:	d00b      	beq.n	8001f94 <I2C_Master_ADDR+0x2e6>
 8001f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d008      	beq.n	8001f94 <I2C_Master_ADDR+0x2e6>
 8001f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d005      	beq.n	8001f94 <I2C_Master_ADDR+0x2e6>
 8001f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d002      	beq.n	8001f94 <I2C_Master_ADDR+0x2e6>
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d107      	bne.n	8001fa4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fa2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8001fc0:	e00b      	b.n	8001fda <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
}
 8001fd8:	e7ff      	b.n	8001fda <I2C_Master_ADDR+0x32c>
 8001fda:	bf00      	nop
 8001fdc:	3744      	adds	r7, #68	; 0x44
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d02b      	beq.n	8002056 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d114      	bne.n	8002056 <I2C_SlaveTransmit_TXE+0x72>
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b29      	cmp	r3, #41	; 0x29
 8002030:	d111      	bne.n	8002056 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002040:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2221      	movs	r2, #33	; 0x21
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2228      	movs	r2, #40	; 0x28
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fa0b 	bl	800146c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d011      	beq.n	8002094 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02c      	beq.n	8002112 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d114      	bne.n	8002112 <I2C_SlaveReceive_RXNE+0x74>
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	2b2a      	cmp	r3, #42	; 0x2a
 80020ec:	d111      	bne.n	8002112 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2222      	movs	r2, #34	; 0x22
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2228      	movs	r2, #40	; 0x28
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7fe f847 	bl	80001a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d012      	beq.n	8002152 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002176:	2b28      	cmp	r3, #40	; 0x28
 8002178:	d125      	bne.n	80021c6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002188:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	81bb      	strh	r3, [r7, #12]
 80021a8:	e002      	b.n	80021b0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80021b8:	89ba      	ldrh	r2, [r7, #12]
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	4619      	mov	r1, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fd ffd2 	bl	8000168 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80021c4:	e00e      	b.n	80021e4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800220a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002238:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002248:	d172      	bne.n	8002330 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b22      	cmp	r3, #34	; 0x22
 800224e:	d002      	beq.n	8002256 <I2C_Slave_STOPF+0x6a>
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b2a      	cmp	r3, #42	; 0x2a
 8002254:	d135      	bne.n	80022c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	b29a      	uxth	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f043 0204 	orr.w	r2, r3, #4
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002288:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fbf6 	bl	8000a80 <HAL_DMA_GetState>
 8002294:	4603      	mov	r3, r0
 8002296:	2b01      	cmp	r3, #1
 8002298:	d049      	beq.n	800232e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	4a69      	ldr	r2, [pc, #420]	; (8002444 <I2C_Slave_STOPF+0x258>)
 80022a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fb72 	bl	8000990 <HAL_DMA_Abort_IT>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d03d      	beq.n	800232e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022bc:	4610      	mov	r0, r2
 80022be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022c0:	e035      	b.n	800232e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f043 0204 	orr.w	r2, r3, #4
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fbc0 	bl	8000a80 <HAL_DMA_GetState>
 8002300:	4603      	mov	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	d014      	beq.n	8002330 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	4a4e      	ldr	r2, [pc, #312]	; (8002444 <I2C_Slave_STOPF+0x258>)
 800230c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fb3c 	bl	8000990 <HAL_DMA_Abort_IT>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002328:	4610      	mov	r0, r2
 800232a:	4798      	blx	r3
 800232c:	e000      	b.n	8002330 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800232e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03e      	beq.n	80023b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b04      	cmp	r3, #4
 8002346:	d112      	bne.n	800236e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d112      	bne.n	80023a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f043 0204 	orr.w	r2, r3, #4
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f843 	bl	800244c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80023c6:	e039      	b.n	800243c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b2a      	cmp	r3, #42	; 0x2a
 80023cc:	d109      	bne.n	80023e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2228      	movs	r2, #40	; 0x28
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fd fedf 	bl	80001a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b28      	cmp	r3, #40	; 0x28
 80023ec:	d111      	bne.n	8002412 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a15      	ldr	r2, [pc, #84]	; (8002448 <I2C_Slave_STOPF+0x25c>)
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fd fe9e 	bl	800014c <HAL_I2C_ListenCpltCallback>
}
 8002410:	e014      	b.n	800243c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	2b22      	cmp	r3, #34	; 0x22
 8002418:	d002      	beq.n	8002420 <I2C_Slave_STOPF+0x234>
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b22      	cmp	r3, #34	; 0x22
 800241e:	d10d      	bne.n	800243c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fd feb2 	bl	80001a0 <HAL_I2C_SlaveRxCpltCallback>
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	080026b1 	.word	0x080026b1
 8002448:	ffff0000 	.word	0xffff0000

0800244c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002462:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002464:	7bbb      	ldrb	r3, [r7, #14]
 8002466:	2b10      	cmp	r3, #16
 8002468:	d002      	beq.n	8002470 <I2C_ITError+0x24>
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d10a      	bne.n	8002486 <I2C_ITError+0x3a>
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b22      	cmp	r3, #34	; 0x22
 8002474:	d107      	bne.n	8002486 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002484:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800248c:	2b28      	cmp	r3, #40	; 0x28
 800248e:	d107      	bne.n	80024a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2228      	movs	r2, #40	; 0x28
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800249e:	e015      	b.n	80024cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ae:	d00a      	beq.n	80024c6 <I2C_ITError+0x7a>
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b60      	cmp	r3, #96	; 0x60
 80024b4:	d007      	beq.n	80024c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024da:	d162      	bne.n	80025a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d020      	beq.n	800253c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	4a6a      	ldr	r2, [pc, #424]	; (80026a8 <I2C_ITError+0x25c>)
 8002500:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fa42 	bl	8000990 <HAL_DMA_Abort_IT>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8089 	beq.w	8002626 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002536:	4610      	mov	r0, r2
 8002538:	4798      	blx	r3
 800253a:	e074      	b.n	8002626 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	4a59      	ldr	r2, [pc, #356]	; (80026a8 <I2C_ITError+0x25c>)
 8002542:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fa21 	bl	8000990 <HAL_DMA_Abort_IT>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d068      	beq.n	8002626 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255e:	2b40      	cmp	r3, #64	; 0x40
 8002560:	d10b      	bne.n	800257a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800259c:	4610      	mov	r0, r2
 800259e:	4798      	blx	r3
 80025a0:	e041      	b.n	8002626 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b60      	cmp	r3, #96	; 0x60
 80025ac:	d125      	bne.n	80025fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d10b      	bne.n	80025e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe ff55 	bl	80014a2 <HAL_I2C_AbortCpltCallback>
 80025f8:	e015      	b.n	8002626 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d10b      	bne.n	8002620 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fd fde1 	bl	80001e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10e      	bne.n	8002654 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002646:	2b00      	cmp	r3, #0
 8002648:	d104      	bne.n	8002654 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002662:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d113      	bne.n	80026a0 <I2C_ITError+0x254>
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b28      	cmp	r3, #40	; 0x28
 800267c:	d110      	bne.n	80026a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <I2C_ITError+0x260>)
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fd fd56 	bl	800014c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	080026b1 	.word	0x080026b1
 80026ac:	ffff0000 	.word	0xffff0000

080026b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026ca:	4b4b      	ldr	r3, [pc, #300]	; (80027f8 <I2C_DMAAbort+0x148>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	08db      	lsrs	r3, r3, #3
 80026d0:	4a4a      	ldr	r2, [pc, #296]	; (80027fc <I2C_DMAAbort+0x14c>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0a1a      	lsrs	r2, r3, #8
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00da      	lsls	r2, r3, #3
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f043 0220 	orr.w	r2, r3, #32
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80026f6:	e00a      	b.n	800270e <I2C_DMAAbort+0x5e>
    }
    count--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270c:	d0ea      	beq.n	80026e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	2200      	movs	r2, #0
 800271c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	2200      	movs	r2, #0
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	2200      	movs	r2, #0
 8002752:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	2200      	movs	r2, #0
 8002762:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b60      	cmp	r3, #96	; 0x60
 800277e:	d10e      	bne.n	800279e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2200      	movs	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7fe fe83 	bl	80014a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800279c:	e027      	b.n	80027ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027a4:	2b28      	cmp	r3, #40	; 0x28
 80027a6:	d117      	bne.n	80027d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2228      	movs	r2, #40	; 0x28
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027d6:	e007      	b.n	80027e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f7fd fcfd 	bl	80001e8 <HAL_I2C_ErrorCallback>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000
 80027fc:	14f8b589 	.word	0x14f8b589

08002800 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	08db      	lsrs	r3, r3, #3
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	0a1a      	lsrs	r2, r3, #8
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3b01      	subs	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d107      	bne.n	800283e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f043 0220 	orr.w	r2, r3, #32
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e008      	b.n	8002850 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284c:	d0e9      	beq.n	8002822 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000000 	.word	0x20000000
 8002860:	14f8b589 	.word	0x14f8b589

08002864 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002874:	d103      	bne.n	800287e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800287c:	e007      	b.n	800288e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002886:	d102      	bne.n	800288e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2208      	movs	r2, #8
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e272      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8087 	beq.w	80029c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b8:	4b92      	ldr	r3, [pc, #584]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d00c      	beq.n	80028de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c4:	4b8f      	ldr	r3, [pc, #572]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d112      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5e>
 80028d0:	4b8c      	ldr	r3, [pc, #560]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d10b      	bne.n	80028f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028de:	4b89      	ldr	r3, [pc, #548]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d06c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x12c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d168      	bne.n	80029c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e24c      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x76>
 8002900:	4b80      	ldr	r3, [pc, #512]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a7f      	ldr	r2, [pc, #508]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e02e      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b7b      	ldr	r3, [pc, #492]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a7a      	ldr	r2, [pc, #488]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800291c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b78      	ldr	r3, [pc, #480]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a77      	ldr	r2, [pc, #476]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0xbc>
 800293a:	4b72      	ldr	r3, [pc, #456]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a71      	ldr	r2, [pc, #452]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xd4>
 8002954:	4b6b      	ldr	r3, [pc, #428]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a6a      	ldr	r2, [pc, #424]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b68      	ldr	r3, [pc, #416]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a67      	ldr	r2, [pc, #412]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fd fef4 	bl	8000760 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fd fef0 	bl	8000760 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e200      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b5d      	ldr	r3, [pc, #372]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xe4>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fd fee0 	bl	8000760 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fd fedc 	bl	8000760 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1ec      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x10c>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d063      	beq.n	8002a9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029d2:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029de:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d11c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x18c>
 80029ea:	4b46      	ldr	r3, [pc, #280]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d116      	bne.n	8002a24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	4b43      	ldr	r3, [pc, #268]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x176>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e1c0      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4939      	ldr	r1, [pc, #228]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	e03a      	b.n	8002a9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a2c:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7fd fe95 	bl	8000760 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3a:	f7fd fe91 	bl	8000760 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1a1      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a58:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4927      	ldr	r1, [pc, #156]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6e:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7fd fe74 	bl	8000760 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7c:	f7fd fe70 	bl	8000760 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e180      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03a      	beq.n	8002b1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d019      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_RCC_OscConfig+0x274>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7fd fe54 	bl	8000760 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fd fe50 	bl	8000760 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e160      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f000 faba 	bl	8003054 <RCC_Delay>
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_RCC_OscConfig+0x274>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae8:	f7fd fe3a 	bl	8000760 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aee:	e00f      	b.n	8002b10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fd fe36 	bl	8000760 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d908      	bls.n	8002b10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e146      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	42420000 	.word	0x42420000
 8002b0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	4b92      	ldr	r3, [pc, #584]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e9      	bne.n	8002af0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80a6 	beq.w	8002c76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2e:	4b8b      	ldr	r3, [pc, #556]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10d      	bne.n	8002b56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b88      	ldr	r3, [pc, #544]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a87      	ldr	r2, [pc, #540]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	61d3      	str	r3, [r2, #28]
 8002b46:	4b85      	ldr	r3, [pc, #532]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	4b82      	ldr	r3, [pc, #520]	; (8002d60 <HAL_RCC_OscConfig+0x4c8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b62:	4b7f      	ldr	r3, [pc, #508]	; (8002d60 <HAL_RCC_OscConfig+0x4c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a7e      	ldr	r2, [pc, #504]	; (8002d60 <HAL_RCC_OscConfig+0x4c8>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7fd fdf7 	bl	8000760 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fd fdf3 	bl	8000760 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e103      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	4b75      	ldr	r3, [pc, #468]	; (8002d60 <HAL_RCC_OscConfig+0x4c8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x312>
 8002b9c:	4b6f      	ldr	r3, [pc, #444]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4a6e      	ldr	r2, [pc, #440]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6213      	str	r3, [r2, #32]
 8002ba8:	e02d      	b.n	8002c06 <HAL_RCC_OscConfig+0x36e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x334>
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4a69      	ldr	r2, [pc, #420]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6213      	str	r3, [r2, #32]
 8002bbe:	4b67      	ldr	r3, [pc, #412]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	4a66      	ldr	r2, [pc, #408]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	f023 0304 	bic.w	r3, r3, #4
 8002bc8:	6213      	str	r3, [r2, #32]
 8002bca:	e01c      	b.n	8002c06 <HAL_RCC_OscConfig+0x36e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCC_OscConfig+0x356>
 8002bd4:	4b61      	ldr	r3, [pc, #388]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	4a60      	ldr	r2, [pc, #384]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	6213      	str	r3, [r2, #32]
 8002be0:	4b5e      	ldr	r3, [pc, #376]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4a5d      	ldr	r2, [pc, #372]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6213      	str	r3, [r2, #32]
 8002bec:	e00b      	b.n	8002c06 <HAL_RCC_OscConfig+0x36e>
 8002bee:	4b5b      	ldr	r3, [pc, #364]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a5a      	ldr	r2, [pc, #360]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6213      	str	r3, [r2, #32]
 8002bfa:	4b58      	ldr	r3, [pc, #352]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4a57      	ldr	r2, [pc, #348]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d015      	beq.n	8002c3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7fd fda7 	bl	8000760 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fd fda3 	bl	8000760 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0b1      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	4b4b      	ldr	r3, [pc, #300]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ee      	beq.n	8002c16 <HAL_RCC_OscConfig+0x37e>
 8002c38:	e014      	b.n	8002c64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7fd fd91 	bl	8000760 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fd fd8d 	bl	8000760 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e09b      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ee      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d105      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6a:	4b3c      	ldr	r3, [pc, #240]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4a3b      	ldr	r2, [pc, #236]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 8087 	beq.w	8002d8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c80:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d061      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d146      	bne.n	8002d22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c94:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <HAL_RCC_OscConfig+0x4cc>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fd fd61 	bl	8000760 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fd fd5d 	bl	8000760 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e06d      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb4:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d108      	bne.n	8002cdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cca:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	4921      	ldr	r1, [pc, #132]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a19      	ldr	r1, [r3, #32]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	430b      	orrs	r3, r1
 8002cee:	491b      	ldr	r1, [pc, #108]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7fd fd31 	bl	8000760 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fd fd2d 	bl	8000760 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e03d      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x46a>
 8002d20:	e035      	b.n	8002d8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_RCC_OscConfig+0x4cc>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fd fd1a 	bl	8000760 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fd fd16 	bl	8000760 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e026      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x498>
 8002d4e:	e01e      	b.n	8002d8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e019      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40007000 	.word	0x40007000
 8002d64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_OscConfig+0x500>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000

08002d9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0d0      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db0:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d910      	bls.n	8002de0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 0207 	bic.w	r2, r3, #7
 8002dc6:	4965      	ldr	r1, [pc, #404]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b63      	ldr	r3, [pc, #396]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0b8      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d020      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df8:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a58      	ldr	r2, [pc, #352]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e10:	4b53      	ldr	r3, [pc, #332]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1c:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	494d      	ldr	r1, [pc, #308]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d040      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d115      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e07f      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e073      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6a:	4b3d      	ldr	r3, [pc, #244]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e06b      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7a:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4936      	ldr	r1, [pc, #216]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e8c:	f7fd fc68 	bl	8000760 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7fd fc64 	bl	8000760 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e053      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 020c 	and.w	r2, r3, #12
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d1eb      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d210      	bcs.n	8002eec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 0207 	bic.w	r2, r3, #7
 8002ed2:	4922      	ldr	r1, [pc, #136]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e032      	b.n	8002f52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4916      	ldr	r1, [pc, #88]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	490e      	ldr	r1, [pc, #56]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f2a:	f000 f821 	bl	8002f70 <HAL_RCC_GetSysClockFreq>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	490a      	ldr	r1, [pc, #40]	; (8002f64 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	5ccb      	ldrb	r3, [r1, r3]
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1cc>)
 8002f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_ClockConfig+0x1d0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fbc6 	bl	80006dc <HAL_InitTick>

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	40021000 	.word	0x40021000
 8002f64:	08003d74 	.word	0x08003d74
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	20000004 	.word	0x20000004

08002f70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x30>
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x36>
 8002f9e:	e027      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fa2:	613b      	str	r3, [r7, #16]
      break;
 8002fa4:	e027      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	0c9b      	lsrs	r3, r3, #18
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fb0:	5cd3      	ldrb	r3, [r2, r3]
 8002fb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d010      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	0c5b      	lsrs	r3, r3, #17
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	4a11      	ldr	r2, [pc, #68]	; (8003010 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fd2:	fb03 f202 	mul.w	r2, r3, r2
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	e004      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a0c      	ldr	r2, [pc, #48]	; (8003014 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fe4:	fb02 f303 	mul.w	r3, r2, r3
 8002fe8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	613b      	str	r3, [r7, #16]
      break;
 8002fee:	e002      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ff2:	613b      	str	r3, [r7, #16]
      break;
 8002ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff6:	693b      	ldr	r3, [r7, #16]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	007a1200 	.word	0x007a1200
 800300c:	08003d8c 	.word	0x08003d8c
 8003010:	08003d9c 	.word	0x08003d9c
 8003014:	003d0900 	.word	0x003d0900

08003018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <HAL_RCC_GetHCLKFreq+0x10>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	20000000 	.word	0x20000000

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003030:	f7ff fff2 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003034:	4602      	mov	r2, r0
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4903      	ldr	r1, [pc, #12]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003042:	5ccb      	ldrb	r3, [r1, r3]
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000
 8003050:	08003d84 	.word	0x08003d84

08003054 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <RCC_Delay+0x34>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0a      	ldr	r2, [pc, #40]	; (800308c <RCC_Delay+0x38>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0a5b      	lsrs	r3, r3, #9
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003070:	bf00      	nop
  }
  while (Delay --);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1e5a      	subs	r2, r3, #1
 8003076:	60fa      	str	r2, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f9      	bne.n	8003070 <RCC_Delay+0x1c>
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	20000000 	.word	0x20000000
 800308c:	10624dd3 	.word	0x10624dd3

08003090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e041      	b.n	8003126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fa50 	bl	800055c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f000 fb16 	bl	8003700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e041      	b.n	80031c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f839 	bl	80031cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3304      	adds	r3, #4
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f000 fac7 	bl	8003700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <HAL_TIM_PWM_Start+0x24>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e022      	b.n	800324a <HAL_TIM_PWM_Start+0x6a>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b04      	cmp	r3, #4
 8003208:	d109      	bne.n	800321e <HAL_TIM_PWM_Start+0x3e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e015      	b.n	800324a <HAL_TIM_PWM_Start+0x6a>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d109      	bne.n	8003238 <HAL_TIM_PWM_Start+0x58>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e008      	b.n	800324a <HAL_TIM_PWM_Start+0x6a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e05e      	b.n	8003310 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d104      	bne.n	8003262 <HAL_TIM_PWM_Start+0x82>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003260:	e013      	b.n	800328a <HAL_TIM_PWM_Start+0xaa>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d104      	bne.n	8003272 <HAL_TIM_PWM_Start+0x92>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003270:	e00b      	b.n	800328a <HAL_TIM_PWM_Start+0xaa>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start+0xa2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003280:	e003      	b.n	800328a <HAL_TIM_PWM_Start+0xaa>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	6839      	ldr	r1, [r7, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fcb4 	bl	8003c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <HAL_TIM_PWM_Start+0x138>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d107      	bne.n	80032b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a18      	ldr	r2, [pc, #96]	; (8003318 <HAL_TIM_PWM_Start+0x138>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_TIM_PWM_Start+0xfa>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d009      	beq.n	80032da <HAL_TIM_PWM_Start+0xfa>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a14      	ldr	r2, [pc, #80]	; (800331c <HAL_TIM_PWM_Start+0x13c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_TIM_PWM_Start+0xfa>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a12      	ldr	r2, [pc, #72]	; (8003320 <HAL_TIM_PWM_Start+0x140>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d111      	bne.n	80032fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b06      	cmp	r3, #6
 80032ea:	d010      	beq.n	800330e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	e007      	b.n	800330e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0201 	orr.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800

08003324 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2200      	movs	r2, #0
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fc62 	bl	8003c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <HAL_TIM_PWM_Stop+0xc4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d117      	bne.n	8003376 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1a      	ldr	r2, [r3, #32]
 800334c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <HAL_TIM_PWM_Stop+0x52>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	f240 4344 	movw	r3, #1092	; 0x444
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <HAL_TIM_PWM_Stop+0x52>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6a1a      	ldr	r2, [r3, #32]
 800337c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003380:	4013      	ands	r3, r2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <HAL_TIM_PWM_Stop+0x82>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a1a      	ldr	r2, [r3, #32]
 800338c:	f240 4344 	movw	r3, #1092	; 0x444
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <HAL_TIM_PWM_Stop+0x82>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d104      	bne.n	80033b6 <HAL_TIM_PWM_Stop+0x92>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b4:	e013      	b.n	80033de <HAL_TIM_PWM_Stop+0xba>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_PWM_Stop+0xa2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c4:	e00b      	b.n	80033de <HAL_TIM_PWM_Stop+0xba>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_PWM_Stop+0xb2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d4:	e003      	b.n	80033de <HAL_TIM_PWM_Stop+0xba>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40012c00 	.word	0x40012c00

080033ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003406:	2302      	movs	r3, #2
 8003408:	e0ae      	b.n	8003568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	f200 809f 	bhi.w	8003558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800341a:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003455 	.word	0x08003455
 8003424:	08003559 	.word	0x08003559
 8003428:	08003559 	.word	0x08003559
 800342c:	08003559 	.word	0x08003559
 8003430:	08003495 	.word	0x08003495
 8003434:	08003559 	.word	0x08003559
 8003438:	08003559 	.word	0x08003559
 800343c:	08003559 	.word	0x08003559
 8003440:	080034d7 	.word	0x080034d7
 8003444:	08003559 	.word	0x08003559
 8003448:	08003559 	.word	0x08003559
 800344c:	08003559 	.word	0x08003559
 8003450:	08003517 	.word	0x08003517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f9b2 	bl	80037c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0208 	orr.w	r2, r2, #8
 800346e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0204 	bic.w	r2, r2, #4
 800347e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6999      	ldr	r1, [r3, #24]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	619a      	str	r2, [r3, #24]
      break;
 8003492:	e064      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f9f8 	bl	8003890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6999      	ldr	r1, [r3, #24]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	021a      	lsls	r2, r3, #8
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	619a      	str	r2, [r3, #24]
      break;
 80034d4:	e043      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fa41 	bl	8003964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0208 	orr.w	r2, r2, #8
 80034f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0204 	bic.w	r2, r2, #4
 8003500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	61da      	str	r2, [r3, #28]
      break;
 8003514:	e023      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fa8b 	bl	8003a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69d9      	ldr	r1, [r3, #28]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	021a      	lsls	r2, r3, #8
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	61da      	str	r2, [r3, #28]
      break;
 8003556:	e002      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	75fb      	strb	r3, [r7, #23]
      break;
 800355c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003566:	7dfb      	ldrb	r3, [r7, #23]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_TIM_ConfigClockSource+0x1c>
 8003588:	2302      	movs	r3, #2
 800358a:	e0b4      	b.n	80036f6 <HAL_TIM_ConfigClockSource+0x186>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c4:	d03e      	beq.n	8003644 <HAL_TIM_ConfigClockSource+0xd4>
 80035c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ca:	f200 8087 	bhi.w	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d2:	f000 8086 	beq.w	80036e2 <HAL_TIM_ConfigClockSource+0x172>
 80035d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035da:	d87f      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035dc:	2b70      	cmp	r3, #112	; 0x70
 80035de:	d01a      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0xa6>
 80035e0:	2b70      	cmp	r3, #112	; 0x70
 80035e2:	d87b      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035e4:	2b60      	cmp	r3, #96	; 0x60
 80035e6:	d050      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x11a>
 80035e8:	2b60      	cmp	r3, #96	; 0x60
 80035ea:	d877      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035ec:	2b50      	cmp	r3, #80	; 0x50
 80035ee:	d03c      	beq.n	800366a <HAL_TIM_ConfigClockSource+0xfa>
 80035f0:	2b50      	cmp	r3, #80	; 0x50
 80035f2:	d873      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d058      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x13a>
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d86f      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b30      	cmp	r3, #48	; 0x30
 80035fe:	d064      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x15a>
 8003600:	2b30      	cmp	r3, #48	; 0x30
 8003602:	d86b      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b20      	cmp	r3, #32
 8003606:	d060      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x15a>
 8003608:	2b20      	cmp	r3, #32
 800360a:	d867      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d05c      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x15a>
 8003610:	2b10      	cmp	r3, #16
 8003612:	d05a      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x15a>
 8003614:	e062      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003626:	f000 facc 	bl	8003bc2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	609a      	str	r2, [r3, #8]
      break;
 8003642:	e04f      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003654:	f000 fab5 	bl	8003bc2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003666:	609a      	str	r2, [r3, #8]
      break;
 8003668:	e03c      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003676:	461a      	mov	r2, r3
 8003678:	f000 fa2c 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2150      	movs	r1, #80	; 0x50
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fa83 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 8003688:	e02c      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003696:	461a      	mov	r2, r3
 8003698:	f000 fa4a 	bl	8003b30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2160      	movs	r1, #96	; 0x60
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fa73 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 80036a8:	e01c      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b6:	461a      	mov	r2, r3
 80036b8:	f000 fa0c 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2140      	movs	r1, #64	; 0x40
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fa63 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 80036c8:	e00c      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f000 fa5a 	bl	8003b8e <TIM_ITRx_SetConfig>
      break;
 80036da:	e003      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e000      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a29      	ldr	r2, [pc, #164]	; (80037b8 <TIM_Base_SetConfig+0xb8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00b      	beq.n	8003730 <TIM_Base_SetConfig+0x30>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371e:	d007      	beq.n	8003730 <TIM_Base_SetConfig+0x30>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a26      	ldr	r2, [pc, #152]	; (80037bc <TIM_Base_SetConfig+0xbc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <TIM_Base_SetConfig+0x30>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <TIM_Base_SetConfig+0xc0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d108      	bne.n	8003742 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <TIM_Base_SetConfig+0xb8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00b      	beq.n	8003762 <TIM_Base_SetConfig+0x62>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003750:	d007      	beq.n	8003762 <TIM_Base_SetConfig+0x62>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a19      	ldr	r2, [pc, #100]	; (80037bc <TIM_Base_SetConfig+0xbc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d003      	beq.n	8003762 <TIM_Base_SetConfig+0x62>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <TIM_Base_SetConfig+0xc0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d108      	bne.n	8003774 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a07      	ldr	r2, [pc, #28]	; (80037b8 <TIM_Base_SetConfig+0xb8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d103      	bne.n	80037a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	615a      	str	r2, [r3, #20]
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800

080037c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f023 0201 	bic.w	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f023 0302 	bic.w	r3, r3, #2
 800380c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a1c      	ldr	r2, [pc, #112]	; (800388c <TIM_OC1_SetConfig+0xc8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10c      	bne.n	800383a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0308 	bic.w	r3, r3, #8
 8003826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a13      	ldr	r2, [pc, #76]	; (800388c <TIM_OC1_SetConfig+0xc8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d111      	bne.n	8003866 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00

08003890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f023 0210 	bic.w	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0320 	bic.w	r3, r3, #32
 80038da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <TIM_OC2_SetConfig+0xd0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d10d      	bne.n	800390c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800390a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a14      	ldr	r2, [pc, #80]	; (8003960 <TIM_OC2_SetConfig+0xd0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d113      	bne.n	800393c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800391a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	40012c00 	.word	0x40012c00

08003964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <TIM_OC3_SetConfig+0xd0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10d      	bne.n	80039de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <TIM_OC3_SetConfig+0xd0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d113      	bne.n	8003a0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	621a      	str	r2, [r3, #32]
}
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40012c00 	.word	0x40012c00

08003a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	031b      	lsls	r3, r3, #12
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <TIM_OC4_SetConfig+0x98>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d109      	bne.n	8003aac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	019b      	lsls	r3, r3, #6
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	40012c00 	.word	0x40012c00

08003ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f023 0201 	bic.w	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 030a 	bic.w	r3, r3, #10
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f023 0210 	bic.w	r2, r3, #16
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	031b      	lsls	r3, r3, #12
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f043 0307 	orr.w	r3, r3, #7
 8003bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b087      	sub	sp, #28
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	021a      	lsls	r2, r3, #8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	609a      	str	r2, [r3, #8]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	2201      	movs	r2, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	401a      	ands	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	fa01 f303 	lsl.w	r3, r1, r3
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e046      	b.n	8003cee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d009      	beq.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a10      	ldr	r2, [pc, #64]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10c      	bne.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800

08003d04 <memset>:
 8003d04:	4603      	mov	r3, r0
 8003d06:	4402      	add	r2, r0
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <__libc_init_array>:
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	2600      	movs	r6, #0
 8003d18:	4d0c      	ldr	r5, [pc, #48]	; (8003d4c <__libc_init_array+0x38>)
 8003d1a:	4c0d      	ldr	r4, [pc, #52]	; (8003d50 <__libc_init_array+0x3c>)
 8003d1c:	1b64      	subs	r4, r4, r5
 8003d1e:	10a4      	asrs	r4, r4, #2
 8003d20:	42a6      	cmp	r6, r4
 8003d22:	d109      	bne.n	8003d38 <__libc_init_array+0x24>
 8003d24:	f000 f81a 	bl	8003d5c <_init>
 8003d28:	2600      	movs	r6, #0
 8003d2a:	4d0a      	ldr	r5, [pc, #40]	; (8003d54 <__libc_init_array+0x40>)
 8003d2c:	4c0a      	ldr	r4, [pc, #40]	; (8003d58 <__libc_init_array+0x44>)
 8003d2e:	1b64      	subs	r4, r4, r5
 8003d30:	10a4      	asrs	r4, r4, #2
 8003d32:	42a6      	cmp	r6, r4
 8003d34:	d105      	bne.n	8003d42 <__libc_init_array+0x2e>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3c:	4798      	blx	r3
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7ee      	b.n	8003d20 <__libc_init_array+0xc>
 8003d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d46:	4798      	blx	r3
 8003d48:	3601      	adds	r6, #1
 8003d4a:	e7f2      	b.n	8003d32 <__libc_init_array+0x1e>
 8003d4c:	08003da0 	.word	0x08003da0
 8003d50:	08003da0 	.word	0x08003da0
 8003d54:	08003da0 	.word	0x08003da0
 8003d58:	08003da4 	.word	0x08003da4

08003d5c <_init>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	bf00      	nop
 8003d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d62:	bc08      	pop	{r3}
 8003d64:	469e      	mov	lr, r3
 8003d66:	4770      	bx	lr

08003d68 <_fini>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	bf00      	nop
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr
